package thesis.evolution;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import ec.EvolutionState;
import ec.Problem;
import ec.gp.*;
import ec.util.Code;
import ec.util.DecodeReturn;

/**
 * A node representing an ephemeral random constant in a program tree generated by genetic
 * programming.
 * 
 * @author Sean Luke
 *
 */
public class FloatERC extends ERC {
	/**
	 * 
	 */
	private static final long serialVersionUID = -8817361358581903506L;
	public double value;

	public String toStringForHumans() {
		return "" + value;
	}

	public String encode() {
		return Code.encode(value);
	}

	public boolean decode(DecodeReturn ret) {
		int pos = ret.pos;
		String data = ret.data;
		Code.decode(ret);
		if (ret.type != DecodeReturn.T_DOUBLE) // uh oh! Restore and signal
												// error.
		{
			ret.data = data;
			ret.pos = pos;
			return false;
		}
		value = ret.d;
		return true;
	}

	public boolean nodeEquals(GPNode node) {
		return (node.getClass() == this.getClass() && ((FloatERC) node).value == value);
	}

	// public int nodeHashCode();
	public void readNode(EvolutionState state, DataInput input)
			throws IOException {
		value = input.readDouble();
	}

	public void writeNode(EvolutionState state, DataOutput output)
			throws IOException {
		output.writeDouble(value);
	}

	public void resetNode(EvolutionState state, int thread) {
		value = state.random[thread].nextDouble() * 1000.0 - 500.0;
	}

	public void mutateNode(EvolutionState state, int thread) {
		double v;
		do
			v = value + state.random[thread].nextGaussian() * 10.0;
		while (v < 0.0 || v >= 1.0);
		value = v;
	}

	public void eval(EvolutionState state, int thread, GPData input,
			ADFStack stack, GPIndividual individual, Problem Problem) {
		((DoubleData) input).x = value;
	}
	
	@Override
	public int expectedChildren() {
		return 0;
	}

}